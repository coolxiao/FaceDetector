apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def gitSha = 'git rev-parse --short HEAD'.execute([], project.rootDir).text.trim()
def fix = 0
def gitCount = fix + Integer.parseInt("git rev-list --count ${gitSha}"
    .execute([], project.rootDir).text.trim())

android {
  compileSdkVersion sdk_version

  defaultConfig {
    minSdkVersion min_sdk_version
    targetSdkVersion sdk_version
    versionCode gitCount
    versionName "1.0.5"

    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }
  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }
}

def okhttp_ver = "3.10.0"
def anko_ver = "0.10.4"

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
  implementation "org.jetbrains.anko:anko-appcompat-v7-commons:$anko_ver"
  api "com.squareup.okhttp3:okhttp:${okhttp_ver}"
  api "com.squareup.okhttp3:logging-interceptor:${okhttp_ver}"
  api 'com.squareup.retrofit2:retrofit:2.3.0'
  api "com.squareup.retrofit2:converter-gson:2.3.0"
  api 'com.google.code.gson:gson:2.8.2'
  api('com.github.fondesa:kpermissions:1.0.0') {
    exclude group: "com.android.support"
  }

  api 'io.fotoapparat.fotoapparat:library:2.2.0'
  api 'com.kingyun:io.fotoapparat.facedetector:1.0.0'
}

repositories {
  maven() { url "${nexus_public}" }
}
uploadArchives {
  repositories {
    mavenDeployer {
      repository(url: "${nexus_releases}") {
        authentication(userName: nexusUsername, password: nexusPassword)
        pom.groupId = lib_groupId
        pom.artifactId = lib_artifactId
        pom.version = android.defaultConfig.versionName
      }
      snapshotRepository(url: "${nexus_snapshots}") {
        authentication(userName: nexusUsername, password: nexusPassword)
        pom.groupId = lib_groupId
        pom.artifactId = lib_artifactId
        pom.version = android.defaultConfig.versionName
      }
    }
  }
}
task sourcesJar(type: Jar) {
  from android.sourceSets.main.java.srcDirs
  classifier = 'sources'
}

task javadoc(type: Javadoc) {
  source = android.sourceSets.main.java.srcDirs
  classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives sourcesJar
}
